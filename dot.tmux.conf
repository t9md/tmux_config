# vim: set sw=4 sts=4 ft=tmux et fdm=marker fdc=3 fdl=1:
#===================================================
# dot.tmux.conf by t9md
#===================================================

# set-option -g default-terminal "xterm-256color"
# set-option -g default-terminal "screen-256color"
#set -g default-command zsh

# Use '`' and 'C-t' as prefix-key
set-option -g prefix `,C-t
bind-key ` send-prefix  # to send '`' itself press '`' twice.

# set -s escape-time 1000
# set -g base-index 1 # 0 is too far from `

# Logging {{{
#===================================================
# start logging with 'F10'
# vi 等でログファイルを開いて、保存すれば、自動で pipe は close される。
bind-key -n F10 command-prompt -p "Log file name: " "pipe-pane 'cat >>~/tmuxlog/%%'"
bind-key -n S-F10 pipe-pane \; display-message "LOG closed"
bind-key l command-prompt -p "Log file name: " "pipe-pane 'cat >>~/tmuxlog/%%'"
bind-key L pipe-pane \; display-message "LOG closed"

# F12 で Cisco のログ取得。この後、S-F10 で手動でログを閉じる必要あり。さらに C-o で取得仕立てのログを開く。
bind-key -n F12 command-prompt -p "Log file name: " "pipe-pane -o 'cat >>~/tmuxlog/%%'; send-keys 'term len 0' Enter 'show run' Enter 'term len 24' Enter"

bind-key a send-keys 'hoge' Enter
bind-key C-a send-keys 'hoge' Enter

# bind-key C-l a
# bind-key C-l b
# bind-key C-l c

# \; send-keys 'term len 0' Enter 'show run' Enter \; pipe-pane \; display-message 'LOG closed'
bind-key o split-window 'exec vim ~/tmuxlog/$(ls -t ~/tmuxlog | head -1)'

# C-o で直前に取得したログを開く
bind-key C-o split-window 'exec vim ~/tmuxlog/$(ls -t ~/tmuxlog | head -1)'

# bind-key O run-shell 'FILE=$(ls -t ~/tmuxlog | head -1)  gvim --remote-send ":split $FILE<CR>"'
bind-key g run-shell 'gvim --remote-send ":split ~/tmuxlog/$(ls -t ~/tmuxlog | head -1)<CR>"'
# bind-key O run-shell 'gvim --remote-send ":split /etc/hosts<CR>"'

# open useful command memo without creating swap file so that I can close window directly with M-w
#bind-key C-s command-prompt "split-window 'exec vim -n ~/MEMO/kiriwake.txt +/%%'"
# よく使うコマンドメモを開く
bind-key C-s split-window 'exec vim -n ~/MEMO/kiriwake.md'

# capture pane contents and write to file
bind H capture-pane \; save-buffer -a -b 0 ~/tmuxlog/hardcopy \; delete-buffer -b 0

# }}}

# Copy {{{
#===================================================
#unbind-key [
# unbind-key p
#bind-key [ display-message "start copy mode!!" \; copy-mode
bind-key [ copy-mode
bind-key C-[ copy-mode
# y で、カーソル位置から行末までをコピーバッファに入れる。
bind-key y   copy-mode \; send-keys Space \; send-keys '$' \; send-keys Enter \; display-message "Copy Done!!"
bind-key C-y copy-mode \; send-keys Space \; send-keys '$' \; send-keys Enter \; display-message "Copy Done!!"
# bind-key M-C copy-mode \; send-keys Space \; send-keys '$' \; send-keys Enter \; display-message "Copy Done!!"
bind-key C-p paste-buffer
bind-key -n M-c copy-mode
unbind -n M-f
# p で　Paste
bind-key p   paste-buffer
# C-u で、コピーモードに入ると同時に、1ページ上へスクロール
bind-key C-u copy-mode -u
bind-key u copy-mode -u
# bind-key p choose-buffer
# bind-key F11 run-shell 'tmux lsw |grep -a1 ^$(tmux display-message -p "#I") |tail -1 | cut -d: -f2 | awk "{ print \$1 }" > ~/tmux/layout; tmux display-message "Saved layout!!" '
# bind-key F11 run-shell 'tmux.rb save_layout'
# bind-key S-F11 run-shell 'tmux.rb load_layout >/dev/null'
# bind-key -n M-r send-keys 'ruby ~/local/dev/vbox_test.rb' Enter
bind-key -n M-r send-keys 'curl http://localhost:9393/debug' Enter

# bind-key -n M-r send-keys -t.1 'rake restorecurrent name=snap02' Enter
# bind-key -n M-g send-keys -t.2 'ssh maverick64' Enter 'ls' Entkr
# bind-key -n M-g send-keys 'ssh root@cobbler' Enter 'cd pxelerator' Enter

bind-key -n M-g send-keys 'ssh root@ub01' Enter 'cd pxelerator' Enter
bind-key -n M-h send-keys 'ssh root@mae-ub01' Enter 'cd pxelerator' Enter
# bind-key -n M-g send-keys 'ssh root@mae-ub01' Enter 'cd pxelerator' Enter
# 'cd /var/www/cgi-bin' Enter
# unbind -n M-g
# bind-key -n M-g send-keys -t.2 'ssh user01@192.168.56.101' Enter
bind-key -n C-M-c new-window
# bind-key -n M-t new-window
bind-key -n C-M-p previous-window
bind-key -n C-M-n next-window
bind-key -n C-M-i previous-window
bind-key -n C-M-o next-window
unbind -n M-b
#bind-key -n M-b   previous-window
# bind-key -n C-M-y copy-mode \; send-keys Space \; send-keys '$' \; send-keys Enter \; display-message "Copy Done!!"
# bind-key -n C-M-p paste-buffer
# clear all paste buffer contents

# コピーバッファを全部クリア
bind-key C run-shell 'for n in $(tmux list-buffer |  cut -d: -f1 | sort -r -n ) ; do tmux delete-buffer -b $n  ; done ; tmux display-message "All copy buffer cleard!!" '
# bind-key -n C-M-s split-window -l1 "tmux.rb"
bind-key -n C-M-s split-window -l 1 "tmux.rb sendkey"
bind-key C-l split-window -l 1 "tmux.rb sendkey"
# bind-key -n F9    split-window "tmux.rb menu_select"
# bind-key -n F8 run-shell 'ls -l'

# }}}

# Paste String {{{
#===================================================
# send key sample 'C-m' means Enter
# 秘密設定の読み込み
source-file ~/.tmux.local
unbind c
unbind s
bind-key s find-window ''
unbind q
bind-key q kill-pane
# set-option -g default-terminal "screen-256color"

# bind-key c   send-keys "abcdefg" Enter
unbind C-c

#===================================================
# View
#===================================================
set-option -g pane-border-fg        colour240
set-option -g pane-active-border-fg colour50

# set status color
set-option -g status-bg blue
set-option -g status-bg black
set-option -g status-fg white
set-option -g status-left '#[fg=green]#H'

# Highlight active window
set-window-option -g window-status-current-bg blue
set-window-option -g window-status-current-fg black

set-option -g mouse-select-pane on
# Enable you can use mouse to copy text in SELECTION MODE.
# set-window-option -g mode-mouse on
# set-window-option -g mode-mouse on
# }}}

# Window Manupilation {{{
#===================================================
bind-key -n M-w kill-pane   # logout key sequence C-d
bind-key -n C-M-Space next-layout # lotate layout with Alt-Space
# bind-key -n M-Space next-layout # lotate layout with Alt-Space

bind-key c new-window
bind-key -n M-2 split-window    # split horizontary
bind-key -n M-3 split-window -h # split vertically

# mouse-select-pane を切り替え。便利だが、この機能が有効だとマウスカーソルで範囲選択ができない。
bind-key m set-option -g mouse-select-pane

# ペインを新しい Window に移動
unbind b; bind-key b break-pane
unbind j; bind-key j join-pane -t:-.bottom-right

bind-key = select-layout tiled
bind-key | select-layout even-horizontal
bind-key _ select-layout even-vertical
bind-key s command-prompt "swap-pane -s 0 -t '%%'"
# bind-key -n M-1 select-layout tiled
# bind-key -n M-4 select-layout main-vertical
# bind-key -n M-6 select-layout even-horizontal
# bind-key -n M-7 select-layout even-vertical
# bind-key -n M-8 select-layout main-horizontal

bind-key -n F2 command-prompt "rename-window '%%'"
# bind-key -n F5 refresh-client   # refresh with 'F5'
#bind-key -n F6 command-prompt
#bind-key -n F7 list-buffers

# F8 でsynchronize-panes の切り替え
bind-key -n F8 set-window-option synchronize-panes
# bind-key -n F8 command-prompt -p "synchronize-pjnes [on/off]: " "set-window-option synchronize-panes %%"
# bind-key -n F11 set-w-option -g mode-mouse on

## メッセージ表示時間(既定値は1000?)
set-option -g display-time 2000
set-option -g display-panes-time 2000

# resize pane size with Allow key
bind-key -r Up resize-pane -U 5
bind-key -r Down resize-pane -D 5
bind-key -r Left resize-pane -L 5
bind-key -r Right resize-pane -R 5

# bind-key s command-prompt "swap-pane -s 0 -t '%%'"
# bind-key T command-prompt -p "Swap Pane:" "swap-pane -s#P -t.%%"
# bind-key T command-prompt -p "Swap Pane:" "#(echo 'swap-pane -U')"
# bind-key T run-shell 'tmux display-message "#P"'
# bind-key T run-shell 'tmux swap-pane -s."#P" -d.3'

# Control key を押しながら、矢印キーで、ペインを移動する。
bind-key -n C-Up    run 'tmux-swap-pane.rb up'
bind-key -n C-Down  run 'tmux-swap-pane.rb down'
bind-key -n C-Left  run 'tmux-swap-pane.rb left'
bind-key -n C-Right run 'tmux-swap-pane.rb right'
bind-key -n C-M-m   run 'tmux-swap-pane.rb master'
bind-key -n M-m run 'tmux-swap-pane.rb master'

# Alt キーを押しながら矢印キーで、ペインサイズを変更する。
bind-key -nr M-Up resize-pane -U 5
bind-key -nr M-Down resize-pane -D 5
bind-key -nr M-Left resize-pane -L 5
bind-key -nr M-Right resize-pane -R 5

# move around panes with j and k, a bit like vim
# as of tmux 1.1, there is no way to move based on pane position (ie, no way to
# move the pane to the right)
# bind-key -r k select-pane -U
# bind-key -r j select-pane -D
# bind-key -r h select-pane -L
# bind-key -r l select-pane -R

bind-key -n M-K select-pane -U
bind-key -n M-J select-pane -D
bind-key -n M-H select-pane -L
bind-key -n M-L select-pane -R

bind-key -n C-M-k select-pane -U
bind-key -n C-M-j select-pane -D
bind-key -n C-M-h select-pane -L
bind-key -n C-M-l select-pane -R

# bind-key -r C-M-k run 'tmux-swap-pane.rb up'
# bind-key -r C-M-j run 'tmux-swap-pane.rb down'
# bind-key -r C-M-h run 'tmux-swap-pane.rb left'
# bind-key -r C-M-l run 'tmux-swap-pane.rb right'

#set-window-option -g xterm-keys on
# bind-key -n C-M-j select-pane -t :.+
# bind-key -n C-M-k select-pane -t :.-
# bind-key -n F11 display-message "THIS"
# bind-key -n S-F11 display-message "THAT"

# ctrl+left/right cycles thru windows
#bind-key -n C-right next
#bind-key -n C-left prev

# open a man page in new window
# bind m command-prompt -p "Man:" "split-window 'exec man %%'"

#bind-key -n C-Down  select-pane -D
#bind-key -n C-Right select-pane -L
#bind-key -n C-Left  select-pane -R

# 設定を再読込
bind-key r source-file ~/.tmux.conf

#bind-key -n M-o select-pane -t :.-
#bind-key -n M-i select-pane -t :.+
#bind-key -n M-v rotate-window -D
#bind-key t swap-pane -s 0 # make this pane to main pain

bind-key \; command-prompt

#bind-key T command-prompt -p "Swap Pane:" "swap-pane -s #P -t %%"
#bind-key T swap-pane -s 0 # make this pane to main pain
#bind-key T swap-pane -t 0 # make this pane to main pain
# bind-key -r r rotate-window -D
# bind-key -r R rotate-window -U

# bind-key -r { swap-pane -U
# bind-key -r } swap-pane -D
# bind-key -n M-[ previous-window
# bind-key -n M-] next-window

bind-key -n M-s display-panes
# bind-key -n M-c new-window
bind-key  / command-prompt "find-window '%%'" 

# setw -g automatic-rename

set-window-option -g mode-keys vi
set -g history-limit 4096

display-message "tmux RELOADED!!"
# }}}
