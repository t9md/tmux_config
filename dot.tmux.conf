# vim: set sw=4 sts=4 ft=tmux et fdm=marker fdc=3 fdl=1:
#===================================================
# dot.tmux.conf by t9md
#===================================================
# Use '`' and 'C-t' as prefix-key
set-option -g prefix `,C-t
bind-key ` send-prefix  # to send '`' itself press '`' twice.

# Logging {{{
#===================================================
# F10: start logging, S-F10: close logfile
#   l: start logging,     L: close logfile
# vi 等でログファイルを開いて、保存すれば、自動で pipe は close される。
bind-key -n F10 command-prompt -p "Log file name: " "pipe-pane 'cat >>~/tmuxlog/%%'"
bind-key -n S-F10 pipe-pane \; display-message "LOG closed"
bind-key l command-prompt -p "Log file name: " "pipe-pane 'cat >>~/tmuxlog/%%'"
bind-key L pipe-pane \; display-message "LOG closed"

# example
# F12 で Cisco のログ取得。この後、S-F10 で手動でログを閉じる必要あり。さらに C-o で取得仕立てのログを開く。
# bind-key -n F12 command-prompt -p "Log file name: " "pipe-pane -o 'cat >>~/tmuxlog/%%'; send-keys 'term len 0' Enter 'show run' Enter 'term len 24' Enter"

# C-o: open newest logfile
#   o: open newest logfile
#   g: open newest logfile in gvim buffer
bind-key C-o split-window 'exec vim ~/tmuxlog/$(ls -t ~/tmuxlog | head -1)'
bind-key   o split-window 'exec vim ~/tmuxlog/$(ls -t ~/tmuxlog | head -1)'
bind-key   g run-shell 'gvim --remote-send ":split ~/tmuxlog/$(ls -t ~/tmuxlog | head -1)<CR>"'

# open useful command memo without creating swap file so that I can close window directly with M-w
# I'm not using vim's swapfile by setting 'set noswap' in .vimrc.
# So I can directly close opend vim buffer directly with `M-w`.
#bind-key C-s command-prompt "split-window 'exec vim -n ~/MEMO/kiriwake.txt +/%%'"
# よく使うコマンドメモを開く
bind-key C-s split-window 'exec vim -n ~/MEMO/kiriwake.md'
bind-key   e split-window 'exec vim -n ~/.tmux.conf'

# capture pane contents and write to file
bind H capture-pane \; save-buffer -a -b 0 ~/tmuxlog/hardcopy \; delete-buffer -b 0
# }}}

# Copy {{{
#===================================================
bind-key [ copy-mode
bind-key C-[ copy-mode
# y で、カーソル位置から行末までをコピーバッファに入れる。
bind-key y   copy-mode \; send-keys Space \; send-keys '$' \; send-keys Enter \; display-message "Copy Done!!"
bind-key C-y copy-mode \; send-keys Space \; send-keys '$' \; send-keys Enter \; display-message "Copy Done!!"
bind-key -n M-c copy-mode
unbind -n M-f

# C-p: paste text from paste-buffer
#   p: paste text from paste-buffer
#   C: force clear all paste-buffer
bind-key C-p paste-buffer
bind-key   p paste-buffer
bind-key   C run-shell 'for n in $(tmux list-buffer |  cut -d: -f1 | sort -r -n ) ; do tmux delete-buffer -b $n  ; done ; tmux display-message "All copy buffer cleard!!" '


# C-u で、コピーモードに入ると同時に、1ページ上へスクロール
bind-key C-u copy-mode -u
bind-key   u copy-mode -u

# C-M-s invoke sendkey ruby app
bind-key -n C-M-s split-window -l 1 "tmux.rb sendkey"
bind-key      C-l split-window -l 1 "tmux.rb sendkey"
# }}}

# Paste String {{{
#===================================================
# send key sample 'C-m' means Enter
# 秘密設定の読み込み
source-file ~/.tmux.local
unbind c
unbind s
bind-key s find-window ''
unbind C-c

#===================================================
# View
#===================================================
set-option -g pane-border-fg        colour240
set-option -g pane-active-border-fg colour50

# set status color
set-option -g status-bg blue
set-option -g status-bg black
set-option -g status-fg white
set-option -g status-left '#[fg=green]#H'

# Highlight active window
set-window-option -g window-status-current-bg blue
set-window-option -g window-status-current-fg black

set-option -g mouse-select-pane on
# }}}

# Window Manupilation {{{
#===================================================
bind-key -n M-w kill-pane   # logout key sequence C-d
unbind q; bind-key q kill-pane
unbind -n M-b
bind-key -n M-2 split-window    # split horizontary
bind-key -n M-3 split-window -h # split vertically

bind-key c new-window
bind-key -n C-M-c new-window
bind-key -n C-M-p previous-window
bind-key -n C-M-n next-window
bind-key -n C-M-i previous-window
bind-key -n C-M-o next-window
# mouse-select-pane を切り替え。便利だが、この機能が有効だとマウスカーソルで範囲選択ができないので、必要な時に `m で切り替える。
bind-key m set-option -g mouse-select-pane

# ペインを新しい Window に移動
unbind b; bind-key b break-pane
unbind j; bind-key j join-pane -t:-.bottom-right

bind-key = select-layout tiled
bind-key | select-layout even-horizontal
bind-key _ select-layout even-vertical

## メッセージ表示時間(既定値は1000?)
set-option -g display-time 2000
set-option -g display-panes-time 1000

# resize pane size with Allow key
bind-key -r Up resize-pane -U 5
bind-key -r Down resize-pane -D 5
bind-key -r Left resize-pane -L 5
bind-key -r Right resize-pane -R 5

# Control key を押しながら、矢印キーで、ペインを移動する。
bind-key -n C-Up    run 'tmux-swap-pane.rb up'
bind-key -n C-Down  run 'tmux-swap-pane.rb down'
bind-key -n C-Left  run 'tmux-swap-pane.rb left'
bind-key -n C-Right run 'tmux-swap-pane.rb right'
bind-key -n C-M-m   run 'tmux-swap-pane.rb master'
bind-key -n M-m run 'tmux-swap-pane.rb master'

# Alt キーを押しながら矢印キーで、ペインサイズを変更する。
bind-key -nr M-Up resize-pane -U 5
bind-key -nr M-Down resize-pane -D 5
bind-key -nr M-Left resize-pane -L 5
bind-key -nr M-Right resize-pane -R 5

# bind-key -r k select-pane -U
# bind-key -r j select-pane -D
# bind-key -r h select-pane -L
# bind-key -r l select-pane -R

bind-key -n M-K select-pane -U
bind-key -n M-J select-pane -D
bind-key -n M-H select-pane -L
bind-key -n M-L select-pane -R

bind-key -n C-M-k select-pane -U
bind-key -n C-M-j select-pane -D
bind-key -n C-M-h select-pane -L
bind-key -n C-M-l select-pane -R

# 設定を再読込
bind-key r source-file ~/.tmux.conf

# For japanese keyboard comment-out!.
bind-key \; command-prompt

bind-key -n M-s display-panes
bind-key  / command-prompt "find-window '%%'" 

set-window-option -g mode-keys vi
set-option -g history-limit 4096

display-message "tmux RELOADED!!"
# }}}
